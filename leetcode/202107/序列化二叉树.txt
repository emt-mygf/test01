//本题我用的是前序遍历编码和解码二叉树
//细节见代码
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        //边界条件
        if(root == nullptr) return "";

        string ans;
        if(root->left == NULL && root->right == NULL) ans = to_string(root->val);
        else if(root->right == NULL) ans = to_string(root->val) + "(" + serialize(root->left) + ")";
        else if(root->left == NULL) ans = to_string(root->val) + "[" + serialize(root->right) + "]";
        else ans = to_string(root->val) + "(" + serialize(root->left) + ")" + "[" + serialize(root->right) + "]";

        return ans;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        int start = 0;
        int end = 0;
        stack<TreeNode*> tree;
        TreeNode* myroot;

        //边界条件
        if(data == "") return nullptr;

        while(end < data.size()) {
            // cout<<"s "<<start<<" e "<<end<<endl;
            if(data.at(end) == '(' || data.at(end) == '[') {
                if(end-start > 0) {
                    //指针的初始化方法
                    //父节点入栈
                    TreeNode* root = new TreeNode(stoi(data.substr(start, end-start)));
                    tree.push(root);
                }
                start = end+1;
            }

            else if(data.at(end) == ')') {
                if(end-start > 0) {
                    //修改栈顶元素
                    TreeNode* root = new TreeNode(stoi(data.substr(start, end-start)));
                    TreeNode* lastroot = tree.top();
                    lastroot->left = root;
                    tree.pop();
                    tree.push(lastroot);
                }
                
                else {
                    //连续两个右括号，栈顶两元素（父子）合并
                    TreeNode* child = tree.top();
                    tree.pop();
                    TreeNode* father = tree.top();
                    tree.pop();

                    father->left = child;
                    tree.push(father);
                }

                start = end+1;
            }

            else if(data.at(end) == ']') {
                if(end-start > 0) {
                    TreeNode* root = new TreeNode(stoi(data.substr(start, end-start)));
                    TreeNode* lastroot = tree.top();
                    lastroot->right = root;
                    tree.pop();
                    tree.push(lastroot);
                }
                
                else {
                    TreeNode* child = tree.top();
                    tree.pop();
                    TreeNode* father = tree.top();
                    tree.pop();

                    father->right = child;
                    tree.push(father);
                }

                start = end+1;
            }

            ++end;
        }

        if(tree.size() == 1) myroot = tree.top();
        //边界条件
        else if(end-start > 0) {
            myroot = new TreeNode(stoi(data.substr(start, end-start)));
        }

        return myroot;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));