class Solution {
public:
    //自定义比较函数
    struct {
        bool operator()(pair<char, int> a, pair<char, int> b) const { return a.second > b.second; }
    } comp;

    string frequencySort(string s) {
        map<char, int> count;
        for(int i=0; i<s.size(); ++i) {
            char get = s.at(i);
            map<char, int>::iterator it = count.find(get);
            if(it == count.end()) {
                pair<char, int> init(get, 1);
                count.insert(init);
            }
            else it->second += 1;
        }

        //map不给排序,复制到vector
        vector<pair<char, int> > v;
        copy(count.begin(), count.end(), back_inserter<vector<pair<char, int> > >(v));

        sort(v.begin(), v.end(), comp);
        string ans;
        for(int i=0; i<v.size(); ++i) {
            for(int j=0; j<v[i].second; ++j) ans += v[i].first;
        }

        return ans;
    }
};